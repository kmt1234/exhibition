<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberSQL">
	
	<!--회원가입 -->
	<insert id="memberWrite" parameterType="member">
		insert into memberTable(M_Name, M_Id, M_Pwd,M_Email, M_Phone) values(#{M_Name}
																			,#{M_Id}
																			,#{M_Pwd}
																			,#{M_Email}
																			,#{M_Phone})								 
	</insert>
	
	<!--로그인-->
	<select id="memberLogin" parameterType="java.util.Map" resultType="member">
		select * from memberTable where M_Id = #{M_Id} and M_Pwd = #{M_Pwd}
	</select>
	
	<!--아이디 중복체크-->
	<select id="memberCheckId" parameterType="java.lang.String" resultType="member">
		select * from memberTable where M_Id = #{M_Id}
	</select>
	
	<!--아이디 찾기-->
	<select id="findMemberId" parameterType="java.util.Map" resultType="member">
		select * from memberTable where M_Name = #{M_Name} and M_Phone = #{M_Phone} and M_Email = #{M_Email}
	</select>
	
	<!--임시비밀번호로 비밀번호 수정-->
	<select id="changeTemPwd" parameterType="java.util.Map" resultType="Integer">
		update memberTable set M_Pwd = #{M_Pwd} where M_Id = #{M_Id}
	</select>
	
	<!--이메일 중복체크-->
	<select id="checkEmail" parameterType="java.lang.String" resultType="member">
		select * from memberTable where M_Email = #{M_Email}
	</select>
	
	<!--회원정보 수정 -->
	<update id="memberModify" parameterType="java.util.Map">
		update memberTable set M_Pwd = #{M_Pwd}, M_Phone = #{M_Phone}, M_Email = #{M_Email} where M_Id = #{M_Id}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="deleteMember" parameterType="java.util.Map">
		delete from memberTable where M_Id = #{M_Id} and M_Pwd = #{M_Pwd}
	</delete>
	
	<!--회원의 예매 리스트를 가져오는 메소드-->
	<select id="getMemberTicketList" parameterType="java.util.Map" resultType="performance.bean.Book_performance_membersDTO">                      				  
    	 SELECT * FROM (
		    			select rownum rn, tt. * from(
		                	(select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_PLAY_MEMBERS where memberid = #{id} and playDate > sysdate)
		                	 UNION ALL
		                	(select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_EXHIBITION_MEMBERS where memberid = #{id} and playDate > sysdate) ORDER BY playDate DESC)tt
    				  )where rn <![CDATA[>=]]> #{startNum} and rn <![CDATA[<=]]> #{endNum}		  
	</select>
	
	<!--회원의 예매 리스트 수를 가져오는 메소드 -->
	<select id="getMemberTicketListTotalA" parameterType="java.util.Map" resultType="int">
		SELECT count(*) FROM (
                select * from (select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_PLAY_MEMBERS where memberid = #{id} and playDate > sysdate) UNION ALL
                select * from (select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_EXHIBITION_MEMBERS where memberid = #{id} and playDate > sysdate)
              )ORDER BY playDate DESC
	</select>
	
	<!--예매한 연극정보 가져오는 메소드  -->
	<select id="getPerformanceInfo" parameterType="java.util.Map" resultType="eventboard">
		select * from eventboard_play where imageName = #{imageName}
	</select>
	
	<!--예매한 전시회정보 가져오는 메소드  -->
	<select id="getExhibitionInfo" parameterType="java.util.Map" resultType="eventboard">
		select * from eventboard where imageName = #{imageName}
	</select>
	
	<!--과거 예매내역 수 가져오는 메소드   -->
	<select id="getTicketHistoryListTotalA" parameterType="java.util.Map" resultType="int">
		SELECT count(*) FROM (
                select * from (select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_PLAY_MEMBERS where memberid = #{id} and playDate <![CDATA[<=]]> sysdate) UNION ALL
                select * from (select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_EXHIBITION_MEMBERS where memberid = #{id} and playDate <![CDATA[<=]]> sysdate)
              )ORDER BY playDate DESC 
	</select>
	
	<!--과거 예매내역 가져오는 메소드 -->
	<select id="getTicketHistoryList" parameterType="java.util.Map" resultType="performance.bean.Book_performance_membersDTO">
		SELECT * FROM (
                select * from (select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_PLAY_MEMBERS where memberid = #{id} and playDate <![CDATA[<=]]> sysdate) UNION ALL
                select * from (select imageName,to_char(playDate,'YYYY-MM-DD') as playDate,memberId,ticketQty from BOOK_EXHIBITION_MEMBERS where memberid = #{id} and playDate <![CDATA[<=]]> sysdate)
              )ORDER BY playDate DESC
	</select>
	
	<!--연극 예매 취소 -->
	<delete id="cancelPerformance" parameterType="java.util.Map">
		delete from book_play_members where memberId = #{memberId} and imageName = #{imageName} and ticketQty = #{ticketQty}
	</delete>
	
	<!--연극 예매티켓 수정 -->
	<update id="backPerformance" parameterType="java.util.Map">
		update eventboard_play_book set remainticket = remainticket+#{ticketQty}, bookticket = bookticket-#{ticketQty} where imagename=#{imageName} and playdate = #{playDate}
	</update>
	
	<!--전시회 예매 취소-->
	<delete id="cancelExhibition" parameterType="java.util.Map">
		delete from book_exhibition_members where memberId = #{memberId} and imageName = #{imageName} and ticketQty = #{ticketQty}
	</delete>
	
	<!--전시회 예매티켓 수정 -->
	<update id="backExhibition" parameterType="java.util.Map">
		update eventboard_exhibition_book set remainticket = remainticket+#{ticketQty}, bookticket = bookticket-#{ticketQty} where imagename=#{imageName} and playdate = #{playDate}
	</update>

	<!--개인회원 인증번호 발송 시, 회원의 아이디 및 이메일 일치 여부 확인  -->
	<select id="verifyNumEmailCheck" parameterType="java.util.Map" resultType="member">
		select * from memberTable where M_Id = #{M_Id} and M_Email = #{M_Email}
	</select>
</mapper>